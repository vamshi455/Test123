CREATE OR REPLACE FUNCTION YOUR_SCHEMA.INTERPOLATE_PVT_COMPLETION_TEST(PRESSURE FLOAT, COMPLETION VARCHAR, VRR_DATE DATE)
RETURNS TABLE (
    PRESSURE FLOAT,
    OIL_FORMATION_VOLUME_FACTOR FLOAT,
    GAS_FORMATION_VOLUME_FACTOR FLOAT,
    WATER_FORMATION_VOLUME_FACTOR FLOAT,
    SOLUTION_GAS_OIL_RATIO FLOAT,
    VOLATIZED_OIL_GAS_RATIO FLOAT,
    VISCOSITY_OIL FLOAT,
    VISCOSITY_WATER FLOAT,
    VISCOSITY_GAS FLOAT,
    INJECTED_GAS_FORMATION_VOLUME_FACTOR FLOAT,
    INJECTED_WATER_FORMATION_VOLUME_FACTOR FLOAT
)
AS $$
WITH 
-- Step 1: Retrieve PVT data with an end date (equivalent to @PVTwithEndDate)
PVT_WITH_END_DATE AS (
    SELECT 
        ID_COMPLETION,
        TEST_DATE,
        PRESSURE,
        OIL_FORMATION_VOLUME_FACTOR,
        GAS_FORMATION_VOLUME_FACTOR,
        WATER_FORMATION_VOLUME_FACTOR,
        SOLUTION_GAS_OIL_RATIO,
        VOLATIZED_OIL_GAS_RATIO,
        VISCOSITY_OIL,
        VISCOSITY_WATER,
        VISCOSITY_GAS,
        INJECTED_GAS_FORMATION_VOLUME_FACTOR,
        INJECTED_WATER_FORMATION_VOLUME_FACTOR,
        COALESCE(
            (SELECT MIN(TEST_DATE)
             FROM YOUR_SCHEMA.COMPLETION_PVT_CHARACTERISTICS cpvt
             WHERE cpvt.TEST_DATE > c.TEST_DATE
               AND cpvt.ID_COMPLETION = c.ID_COMPLETION),
            '9999-12-31'::DATE
        ) AS END_DATE
    FROM YOUR_SCHEMA.COMPLETION_PVT_CHARACTERISTICS c
    WHERE ID_COMPLETION = COMPLETION
      AND TEST_DATE <= EOMONTH(VRR_DATE)
      AND TEST_DATE >= PRESSURE
    ORDER BY TEST_DATE DESC
),
-- Step 2: Find an exact match for the given pressure (equivalent to @ExactMatch)
EXACT_MATCH AS (
    SELECT 
        PRESSURE,
        OIL_FORMATION_VOLUME_FACTOR,
        GAS_FORMATION_VOLUME_FACTOR,
        WATER_FORMATION_VOLUME_FACTOR,
        SOLUTION_GAS_OIL_RATIO,
        VOLATIZED_OIL_GAS_RATIO,
        VISCOSITY_OIL,
        VISCOSITY_WATER,
        VISCOSITY_GAS,
        INJECTED_GAS_FORMATION_VOLUME_FACTOR,
        INJECTED_WATER_FORMATION_VOLUME_FACTOR
    FROM PVT_WITH_END_DATE
    WHERE TEST_DATE = (
        SELECT MAX(TEST_DATE)
        FROM PVT_WITH_END_DATE p
        WHERE p.PRESSURE = PRESSURE
          AND p.ID_COMPLETION = COMPLETION
          AND p.TEST_DATE <= EOMONTH(VRR_DATE)
    )
      AND PRESSURE = PRESSURE
    LIMIT 1
),
-- Step 3: Find the lower bound (pressure < given pressure, closest to it)
LOWER_BOUND AS (
    SELECT 
        PRESSURE,
        OIL_FORMATION_VOLUME_FACTOR,
        GAS_FORMATION_VOLUME_FACTOR,
        WATER_FORMATION_VOLUME_FACTOR,
        SOLUTION_GAS_OIL_RATIO,
        VOLATIZED_OIL_GAS_RATIO,
        VISCOSITY_OIL,
        VISCOSITY_WATER,
        VISCOSITY_GAS,
        INJECTED_GAS_FORMATION_VOLUME_FACTOR,
        INJECTED_WATER_FORMATION_VOLUME_FACTOR
    FROM PVT_WITH_END_DATE
    WHERE PRESSURE < PRESSURE
      AND ID_COMPLETION = COMPLETION
      AND TEST_DATE <= EOMONTH(VRR_DATE)
    ORDER BY PRESSURE DESC, TEST_DATE DESC
    LIMIT 1
),
-- Step 4: Find the upper bound (pressure > given pressure, closest to it)
UPPER_BOUND AS (
    SELECT 
        PRESSURE,
        OIL_FORMATION_VOLUME_FACTOR,
        GAS_FORMATION_VOLUME_FACTOR,
        WATER_FORMATION_VOLUME_FACTOR,
        SOLUTION_GAS_OIL_RATIO,
        VOLATIZED_OIL_GAS_RATIO,
        VISCOSITY_OIL,
        VISCOSITY_WATER,
        VISCOSITY_GAS,
        INJECTED_GAS_FORMATION_VOLUME_FACTOR,
        INJECTED_WATER_FORMATION_VOLUME_FACTOR
    FROM PVT_WITH_END_DATE
    WHERE PRESSURE > PRESSURE
      AND ID_COMPLETION = COMPLETION
      AND TEST_DATE <= EOMONTH(VRR_DATE)
    ORDER BY PRESSURE ASC, TEST_DATE DESC
    LIMIT 1
),
-- Step 5: Find the second bound if upper bound exists but no lower bound
SECOND_BOUND AS (
    SELECT 
        PRESSURE,
        OIL_FORMATION_VOLUME_FACTOR,
        GAS_FORMATION_VOLUME_FACTOR,
        WATER_FORMATION_VOLUME_FACTOR,
        SOLUTION_GAS_OIL_RATIO,
        VOLATIZED_OIL_GAS_RATIO,
        VISCOSITY_OIL,
        VISCOSITY_WATER,
        VISCOSITY_GAS,
        INJECTED_GAS_FORMATION_VOLUME_FACTOR,
        INJECTED_WATER_FORMATION_VOLUME_FACTOR
    FROM PVT_WITH_END_DATE
    WHERE PRESSURE > (SELECT PRESSURE FROM UPPER_BOUND)
      AND ID_COMPLETION = COMPLETION
      AND TEST_DATE <= EOMONTH(VRR_DATE)
    ORDER BY PRESSURE ASC, TEST_DATE DESC
    LIMIT 1
),
-- Step 6: Interpolate or extrapolate values
INTERPOLATED_VALUES AS (
    SELECT 
        CASE 
            -- Case 1: Exact match found
            WHEN (SELECT COUNT(*) FROM EXACT_MATCH) = 1 THEN (
                SELECT 
                    PRESSURE,
                    OIL_FORMATION_VOLUME_FACTOR,
                    GAS_FORMATION_VOLUME_FACTOR,
                    WATER_FORMATION_VOLUME_FACTOR,
                    SOLUTION_GAS_OIL_RATIO,
                    VOLATIZED_OIL_GAS_RATIO,
                    VISCOSITY_OIL,
                    VISCOSITY_WATER,
                    VISCOSITY_GAS,
                    INJECTED_GAS_FORMATION_VOLUME_FACTOR,
                    INJECTED_WATER_FORMATION_VOLUME_FACTOR
                FROM EXACT_MATCH
            )
            -- Case 2: Both lower and upper bounds exist
            WHEN (SELECT COUNT(*) FROM LOWER_BOUND) = 1 AND (SELECT COUNT(*) FROM UPPER_BOUND) = 1 THEN (
                SELECT 
                    PRESSURE AS TARGET_PRESSURE,
                    -- Linear interpolation for each property
                    (LOWER_BOUND.OIL_FORMATION_VOLUME_FACTOR + 
                        (UPPER_BOUND.OIL_FORMATION_VOLUME_FACTOR - LOWER_BOUND.OIL_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS OIL_FORMATION_VOLUME_FACTOR,
                    (LOWER_BOUND.GAS_FORMATION_VOLUME_FACTOR + 
                        (UPPER_BOUND.GAS_FORMATION_VOLUME_FACTOR - LOWER_BOUND.GAS_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS GAS_FORMATION_VOLUME_FACTOR,
                    (LOWER_BOUND.WATER_FORMATION_VOLUME_FACTOR + 
                        (UPPER_BOUND.WATER_FORMATION_VOLUME_FACTOR - LOWER_BOUND.WATER_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS WATER_FORMATION_VOLUME_FACTOR,
                    (LOWER_BOUND.SOLUTION_GAS_OIL_RATIO + 
                        (UPPER_BOUND.SOLUTION_GAS_OIL_RATIO - LOWER_BOUND.SOLUTION_GAS_OIL_RATIO) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS SOLUTION_GAS_OIL_RATIO,
                    (LOWER_BOUND.VOLATIZED_OIL_GAS_RATIO + 
                        (UPPER_BOUND.VOLATIZED_OIL_GAS_RATIO - LOWER_BOUND.VOLATIZED_OIL_GAS_RATIO) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS VOLATIZED_OIL_GAS_RATIO,
                    (LOWER_BOUND.VISCOSITY_OIL + 
                        (UPPER_BOUND.VISCOSITY_OIL - LOWER_BOUND.VISCOSITY_OIL) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS VISCOSITY_OIL,
                    (LOWER_BOUND.VISCOSITY_WATER + 
                        (UPPER_BOUND.VISCOSITY_WATER - LOWER_BOUND.VISCOSITY_WATER) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS VISCOSITY_WATER,
                    (LOWER_BOUND.VISCOSITY_GAS + 
                        (UPPER_BOUND.VISCOSITY_GAS - LOWER_BOUND.VISCOSITY_GAS) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS VISCOSITY_GAS,
                    (LOWER_BOUND.INJECTED_GAS_FORMATION_VOLUME_FACTOR + 
                        (UPPER_BOUND.INJECTED_GAS_FORMATION_VOLUME_FACTOR - LOWER_BOUND.INJECTED_GAS_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS INJECTED_GAS_FORMATION_VOLUME_FACTOR,
                    (LOWER_BOUND.INJECTED_WATER_FORMATION_VOLUME_FACTOR + 
                        (UPPER_BOUND.INJECTED_WATER_FORMATION_VOLUME_FACTOR - LOWER_BOUND.INJECTED_WATER_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - LOWER_BOUND.PRESSURE) / (UPPER_BOUND.PRESSURE - LOWER_BOUND.PRESSURE)) AS INJECTED_WATER_FORMATION_VOLUME_FACTOR
                FROM LOWER_BOUND, UPPER_BOUND
            )
            -- Case 3: Upper bound exists, no lower bound, but a second bound can be found
            WHEN (SELECT COUNT(*) FROM UPPER_BOUND) = 1 AND (SELECT COUNT(*) FROM LOWER_BOUND) = 0 AND (SELECT COUNT(*) FROM SECOND_BOUND) = 1 THEN (
                SELECT 
                    PRESSURE AS TARGET_PRESSURE,
                    (UPPER_BOUND.OIL_FORMATION_VOLUME_FACTOR + 
                        (SECOND_BOUND.OIL_FORMATION_VOLUME_FACTOR - UPPER_BOUND.OIL_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS OIL_FORMATION_VOLUME_FACTOR,
                    (UPPER_BOUND.GAS_FORMATION_VOLUME_FACTOR + 
                        (SECOND_BOUND.GAS_FORMATION_VOLUME_FACTOR - UPPER_BOUND.GAS_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS GAS_FORMATION_VOLUME_FACTOR,
                    (UPPER_BOUND.WATER_FORMATION_VOLUME_FACTOR + 
                        (SECOND_BOUND.WATER_FORMATION_VOLUME_FACTOR - UPPER_BOUND.WATER_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS WATER_FORMATION_VOLUME_FACTOR,
                    (UPPER_BOUND.SOLUTION_GAS_OIL_RATIO + 
                        (SECOND_BOUND.SOLUTION_GAS_OIL_RATIO - UPPER_BOUND.SOLUTION_GAS_OIL_RATIO) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS SOLUTION_GAS_OIL_RATIO,
                    (UPPER_BOUND.VOLATIZED_OIL_GAS_RATIO + 
                        (SECOND_BOUND.VOLATIZED_OIL_GAS_RATIO - UPPER_BOUND.VOLATIZED_OIL_GAS_RATIO) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS VOLATIZED_OIL_GAS_RATIO,
                    (UPPER_BOUND.VISCOSITY_OIL + 
                        (SECOND_BOUND.VISCOSITY_OIL - UPPER_BOUND.VISCOSITY_OIL) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS VISCOSITY_OIL,
                    (UPPER_BOUND.VISCOSITY_WATER + 
                        (SECOND_BOUND.VISCOSITY_WATER - UPPER_BOUND.VISCOSITY_WATER) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS VISCOSITY_WATER,
                    (UPPER_BOUND.VISCOSITY_GAS + 
                        (SECOND_BOUND.VISCOSITY_GAS - UPPER_BOUND.VISCOSITY_GAS) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS VISCOSITY_GAS,
                    (UPPER_BOUND.INJECTED_GAS_FORMATION_VOLUME_FACTOR + 
                        (SECOND_BOUND.INJECTED_GAS_FORMATION_VOLUME_FACTOR - UPPER_BOUND.INJECTED_GAS_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS INJECTED_GAS_FORMATION_VOLUME_FACTOR,
                    (UPPER_BOUND.INJECTED_WATER_FORMATION_VOLUME_FACTOR + 
                        (SECOND_BOUND.INJECTED_WATER_FORMATION_VOLUME_FACTOR - UPPER_BOUND.INJECTED_WATER_FORMATION_VOLUME_FACTOR) * 
                        (PRESSURE - UPPER_BOUND.PRESSURE) / (SECOND_BOUND.PRESSURE - UPPER_BOUND.PRESSURE)) AS INJECTED_WATER_FORMATION_VOLUME_FACTOR
                FROM UPPER_BOUND, SECOND_BOUND
            )
            -- Case 4: No matches or bounds, return NULLs
            ELSE (
                SELECT 
                    PRESSURE AS TARGET_PRESSURE,
                    NULL AS OIL_FORMATION_VOLUME_FACTOR,
                    NULL AS GAS_FORMATION_VOLUME_FACTOR,
                    NULL AS WATER_FORMATION_VOLUME_FACTOR,
                    NULL AS SOLUTION_GAS_OIL_RATIO,
                    NULL AS VOLATIZED_OIL_GAS_RATIO,
                    NULL AS VISCOSITY_OIL,
                    NULL AS VISCOSITY_WATER,
                    NULL AS VISCOSITY_GAS,
                    NULL AS INJECTED_GAS_FORMATION_VOLUME_FACTOR,
                    NULL AS INJECTED_WATER_FORMATION_VOLUME_FACTOR
            )
        END AS (
            PRESSURE FLOAT,
            OIL_FORMATION_VOLUME_FACTOR FLOAT,
            GAS_FORMATION_VOLUME_FACTOR FLOAT,
            WATER_FORMATION_VOLUME_FACTOR FLOAT,
            SOLUTION_GAS_OIL_RATIO FLOAT,
            VOLATIZED_OIL_GAS_RATIO FLOAT,
            VISCOSITY_OIL FLOAT,
            VISCOSITY_WATER FLOAT,
            VISCOSITY_GAS FLOAT,
            INJECTED_GAS_FORMATION_VOLUME_FACTOR FLOAT,
            INJECTED_WATER_FORMATION_VOLUME_FACTOR FLOAT
        )
)
-- Step 7: Round the interpolated values and return
SELECT 
    ROUND(PRESSURE, 5) AS PRESSURE,
    ROUND(OIL_FORMATION_VOLUME_FACTOR, 5) AS OIL_FORMATION_VOLUME_FACTOR,
    ROUND(GAS_FORMATION_VOLUME_FACTOR, 5) AS GAS_FORMATION_VOLUME_FACTOR,
    ROUND(WATER_FORMATION_VOLUME_FACTOR, 5) AS WATER_FORMATION_VOLUME_FACTOR,
    ROUND(SOLUTION_GAS_OIL_RATIO, 5) AS SOLUTION_GAS_OIL_RATIO,
    ROUND(VOLATIZED_OIL_GAS_RATIO, 5) AS VOLATIZED_OIL_GAS_RATIO,
    ROUND(VISCOSITY_OIL, 5) AS VISCOSITY_OIL,
    ROUND(VISCOSITY_WATER, 5) AS VISCOSITY_WATER,
    ROUND(VISCOSITY_GAS, 5) AS VISCOSITY_GAS,
    ROUND(INJECTED_GAS_FORMATION_VOLUME_FACTOR, 5) AS INJECTED_GAS_FORMATION_VOLUME_FACTOR,
    ROUND(INJECTED_WATER_FORMATION_VOLUME_FACTOR, 5) AS INJECTED_WATER_FORMATION_VOLUME_FACTOR
FROM INTERPOLATED_VALUES;
$$;
